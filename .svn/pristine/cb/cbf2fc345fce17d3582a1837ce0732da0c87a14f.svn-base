package controller;

import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import dao.AccDao;
import dao.CartDao;
import model.Accommodation;
import model.CartItem;
import model.LoginUser;
import model.Reservation;
import model.Room;
import model.RoomId;
import model.User;

@Controller
public class CartController {
	
	@Autowired
	private AccDao accDao;
	@Autowired
	private CartDao cartDao;
	
	@RequestMapping(value="/cart/modify.html") //장바구니에서 수정하기 화면이동
	public ModelAndView modify(String cartItemId) {
		ModelAndView mav = new ModelAndView("main");
		CartItem cartItem = this.cartDao.selectOneCartItem(cartItemId);
		Accommodation acc = this.accDao.getAccDetail(cartItem.getRoom().getId().getAccommodationId());
		mav.addObject("acc",acc);
		mav.addObject("cartItem", cartItem);
		mav.addObject("BODY","cartModify.jsp");
		return mav;
	}
	
	@RequestMapping(value="/cart/delete.html",method=RequestMethod.POST) //장바구니에서 삭제
	public ModelAndView delete(String cartItemId, HttpSession session) {
		ModelAndView mav = new ModelAndView("main");
		LoginUser loginUser = (LoginUser)session.getAttribute("loginUser"); //세션에서 로그인 유저 불러옴
		CartItem cartItem = this.cartDao.selectOneCartItem(cartItemId); //장바구니 항목 1개 불러옴
		this.cartDao.deleteCart(loginUser, cartItem); //db에서 장바구니 항목 삭제
		//장바구니를 다시 조회(객체 정보를 다시 담아야함)
		List<CartItem> cartList = this.cartDao.selectCartItem(loginUser.getId());
		for(CartItem item : cartList) {
		    	String roomId = item.getRoom().getId().getRoomId(); //방ID가져오기
		    	String accId = item.getRoom().getId().getAccommodationId();
		    	RoomId room_Id = new RoomId(); 
		    	room_Id.setAccommodationId(accId); room_Id.setRoomId(roomId);
		    	Room room = this.cartDao.getRoomInfo(room_Id);
		    	Accommodation acc = this.accDao.getAccDetail(accId);
		    	room.setAccommodation(acc);
		    	item.setRoom(room);
		}
		
		mav.addObject("cartList",cartList);
		mav.addObject("message","장바구니에서 삭제했습니다.");
		mav.addObject("BODY","cartList.jsp");
		return mav;
	}
	
	@RequestMapping(value="/cart/cartList.html") //장바구니로 이동
	public ModelAndView cartList(HttpSession session) {
		ModelAndView mav = new ModelAndView("main");
		LoginUser user = (LoginUser)session.getAttribute("loginUser");
		if(user == null) { //로그인 안했을 때 로그인 화면으로 이동
			mav.addObject(new LoginUser());
			mav.addObject("BODY","login.jsp");
			return mav;
		}
		List<CartItem> cartList = this.cartDao.selectCartItem(user.getId()); //장바구니 리스트 불러옴
		int cartItemNum = this.cartDao.countCartItem(user.getId()); //장바구니 항목 갯수 체크
		for(CartItem item : cartList) {
		    	String roomId = item.getRoom().getId().getRoomId();
		    	String accId = item.getRoom().getId().getAccommodationId();
		    	RoomId room_Id = new RoomId();
		    	room_Id.setAccommodationId(accId); room_Id.setRoomId(roomId);
		    	Room room = this.cartDao.getRoomInfo(room_Id);
		    	Accommodation acc = this.accDao.getAccDetail(accId);
		    	room.setAccommodation(acc);
		    	item.setRoom(room);
		}
		mav.addObject("cartItemNum", cartItemNum);
		mav.addObject("cartList",cartList);
		mav.addObject("BODY","cartList.jsp");
		return mav;
	}

	@RequestMapping(value="/cart/addCart.html") //장바구니에 추가
	public ModelAndView addCart(@Valid Reservation reservation, BindingResult br,
			HttpSession session, String accId, String roomId) {
		ModelAndView mav = new ModelAndView("main");
		LoginUser user = (LoginUser)session.getAttribute("loginUser");
		//로그인을 안 한 경우, 로그인 창을 띄운다.
		if(user == null) {
			mav.addObject(new LoginUser());
			mav.addObject("BODY","login.jsp");
			return mav;
		}
		else { //로그인을 한 경우
			
		//폼 체크 진행시 객체 유지
		Accommodation acc = this.accDao.getAccDetail(accId);
		List<Room> list = this.accDao.getRoomId(accId);
		Room room = this.accDao.getRoomDetail(accId, roomId);
		mav.addObject("roomInfo",room);
		mav.addObject("reservation", reservation);
		mav.addObject("ACC",acc);
		mav.addObject("RoomList", list);
		//어노테이션을 이용한 폼체크
		if(br.hasErrors()) {
			mav.addObject("BODY","accDetail.jsp");
			mav.getModel().putAll(br.getModel());
			return mav;
		}
		Date checkIn = reservation.getCheck_in_date();
		Date checkOut = reservation.getCheck_out_date();
		// 날짜 차이 계산
        long diffInMillies = checkOut.getTime() - checkIn.getTime();
        int numberOfNights = (int)TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
		
		//총 계산금액 설정
		int total_price =  room.getPrice_per_night() * reservation.getCount() * numberOfNights;
		reservation.setTotal_price(total_price);
		reservation.setRoom(room);
		
		//장바구니에 추가
		CartItem cartItem = new CartItem();
		Integer num = this.cartDao.getMaxCartId();
		if(num == null) {
			num = 1;
		}else {
			num += 1;
		}
		String maxNum = Integer.toString(num);
		cartItem.setCartitem_id(maxNum);
		User uuser = this.accDao.getUserId(user.getId());
		//장바구니에 같은 번호의 방이 있는지 확인
		int checkRoom = this.cartDao.checkRoomInCart(user, room);
		if(checkRoom == 0) { //장바구니에 똑같은 방이 없을 경우
			//db에 장바구니 항목 삽입
			this.cartDao.insertCartItem(cartItem, reservation, uuser);
			mav.addObject("BODY","addCartResult.jsp");
		}
		else { //장바구니에 똑같은 방이 있는 경우
			mav.addObject("message","이미 장바구니에 추가된 방입니다.");
			mav.addObject("BODY","accDetail.jsp");
		}
		return mav;
		}
	}
}
